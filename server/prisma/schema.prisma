generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model cache {
  key        String @id @db.VarChar(255)
  value      String @db.MediumText
  expiration Int
}

model cache_locks {
  key        String @id @db.VarChar(255)
  owner      String @db.VarChar(255)
  expiration Int
}

model client_addresses {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  street      String    @db.VarChar(255)
  city        String    @db.VarChar(100)
  postal_code String?   @db.VarChar(10)
  province    String?   @db.VarChar(100)
  country     String    @default("Italia") @db.VarChar(100)
  is_primary  Boolean   @default(false)
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
  quotes      quotes[]
  client_id   BigInt?   @db.UnsignedBigInt
  clients     clients?  @relation(fields: [client_id], references: [id])

  @@index([city], map: "client_addresses_city_index")
}

model client_phones {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  client_id  BigInt    @db.UnsignedBigInt
  number     String    @db.VarChar(20)
  is_primary Boolean   @default(false)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  clients    clients   @relation(fields: [client_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_client_phones_client_id")

  @@index([number], map: "client_phones_number_index")
  @@index([client_id], map: "fk_client_phones_client_id")
}

model clients {
  id         BigInt             @id @default(autoincrement()) @db.UnsignedBigInt
  name       String             @db.VarChar(255)
  email      String?            @db.VarChar(255)
  created_by BigInt?            @db.UnsignedBigInt
  created_at DateTime?          @db.Timestamp(0)
  updated_at DateTime?          @db.Timestamp(0)
  deleted_at DateTime?          @db.Timestamp(0)
  users      users?             @relation(fields: [created_by], references: [id], onUpdate: Restrict, map: "1")
  quotes     quotes[]
  phones     client_phones[]
  addresses  client_addresses[]

  @@index([created_by], map: "1")
  @@index([email], map: "clients_email_index")
  @@index([name], map: "clients_name_index")
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  uuid       String   @unique(map: "failed_jobs_uuid_unique") @db.VarChar(255)
  connection String   @db.Text
  queue      String   @db.Text
  payload    String   @db.LongText
  exception  String   @db.LongText
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model job_batches {
  id             String  @id @db.VarChar(255)
  name           String  @db.VarChar(255)
  total_jobs     Int
  pending_jobs   Int
  failed_jobs    Int
  failed_job_ids String  @db.LongText
  options        String? @db.MediumText
  cancelled_at   Int?
  created_at     Int
  finished_at    Int?
}

model jobs {
  id           BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  queue        String @db.VarChar(255)
  payload      String @db.LongText
  attempts     Int    @db.UnsignedTinyInt
  reserved_at  Int?   @db.UnsignedInt
  available_at Int    @db.UnsignedInt
  created_at   Int    @db.UnsignedInt

  @@index([queue], map: "jobs_queue_index")
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String @db.VarChar(255)
  batch     Int
}

model posts {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  title      String    @db.VarChar(255)
  content    String    @db.Text
  file_path  String?   @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model quote_items {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  quote_id    BigInt    @db.UnsignedBigInt
  name        String    @db.VarChar(255)
  description String    @db.Text
  quantity    Decimal   @db.Decimal(8, 2)
  unit_price  Decimal   @db.Decimal(10, 2)
  total_price Decimal   @db.Decimal(10, 2)
  sort_order  Int       @default(0)
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
  quotes      quotes    @relation(fields: [quote_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_quote_items_quote_id")

  @@index([quote_id], map: "idx_quote_items_quote_id")
  @@index([sort_order], map: "idx_quote_items_sort_order")
}

model quotes {
  id                BigInt           @id @default(autoincrement()) @db.UnsignedBigInt
  client_id         BigInt           @db.UnsignedBigInt
  client_address_id BigInt           @db.UnsignedBigInt
  description       String           @db.Text
  status            quotes_status    @default(draft)
  total_amount      Decimal          @default(0.00) @db.Decimal(10, 2)
  notes             String?          @db.Text
  valid_until       DateTime?        @db.Date
  created_by        BigInt?          @db.UnsignedBigInt
  sent_at           DateTime?        @db.Timestamp(0)
  accepted_at       DateTime?        @db.Timestamp(0)
  rejected_at       DateTime?        @db.Timestamp(0)
  created_at        DateTime?        @db.Timestamp(0)
  updated_at        DateTime?        @db.Timestamp(0)
  deleted_at        DateTime?        @db.Timestamp(0)
  quote_items       quote_items[]
  client_addresses  client_addresses @relation(fields: [client_address_id], references: [id], onUpdate: Restrict, map: "fk_quotes_client_address_id")
  clients           clients          @relation(fields: [client_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_quotes_client_id")
  users             users?           @relation(fields: [created_by], references: [id], onUpdate: Restrict, map: "fk_quotes_created_by")

  @@index([client_address_id], map: "fk_quotes_client_address_id")
  @@index([client_id], map: "idx_quotes_client_id")
  @@index([created_by], map: "idx_quotes_created_by")
  @@index([status], map: "idx_quotes_status")
}

model sessions {
  id            String  @id @db.VarChar(255)
  user_id       BigInt? @db.UnsignedBigInt
  ip_address    String? @db.VarChar(45)
  user_agent    String? @db.Text
  payload       String  @db.Text
  last_activity Int
}

model users {
  id                BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name              String    @db.VarChar(255)
  email             String    @unique(map: "users_email_unique") @db.VarChar(255)
  email_verified_at DateTime? @db.Timestamp(0)
  password          String    @db.VarChar(255)
  remember_token    String?   @db.VarChar(100)
  created_at        DateTime? @db.Timestamp(0)
  updated_at        DateTime? @db.Timestamp(0)
  clients           clients[]
  quotes            quotes[]
}

enum quotes_status {
  draft
  sent
  accepted
  rejected
}
